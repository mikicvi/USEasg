model InvoiceProcessing

enum InvoiceStatus{unprocessed, processed}

class Customer
    attributes
        id  : String
        firstName : String
        lastName : String
        address1 : String
        address2 : String
        city : String
        state : String
        zip : String
        telHome : String
        telWork : String

end


class Invoice 
    attributes
        number : String
        amount : Real
    statemachines
    psm States
    states
        newInvoice : initial
        unprocessed
        processed
    transitions
        newInvoice -> unprocessed {create}
        unprocessed -> processed {}
    end

end


class ReceivablesAccount
    attributes
        number : String
        currentBalance : Real
        day30Balance : Real
        day60Balance : Real
        day90Balance : Real
        day120Balance : Real
        collections : Real


end


class ARProcessor
    operations
    --pass a set of receivables accounts to be processed
    ProcessInvoices(arAccounts : Set(ReceivablesAccount))
        begin
            for arAccount in arAccounts do
                for invoice in arAccount.unprocessedInvoices do
                    if invoice.amount > 0 then
                        arAccount.currentBalance := arAccount.currentBalance + invoice.amount;
                        delete (arAccount, invoice) from RecAcctToInvoiceUnproc;
                        insert (arAccount, invoice) into RecAcctToInvoiceProcc;
                    end;
                end
            end
        end
    EndOfMonthUpdate(arAccounts : Set(ReceivablesAccount))
        begin
            for arAccount in arAccounts do
                arAccount.day120Balance := arAccount.day90Balance;
                arAccount.day90Balance := arAccount.day60Balance;
                arAccount.day60Balance := arAccount.day30Balance;
                arAccount.day30Balance := arAccount.currentBalance;
                arAccount.currentBalance := 0;
            end
        end
end



association CustToRecAcct between 
    Customer [1] role customer
    ReceivablesAccount [0..1] 

end

association RecAcctToInvoiceUnproc between
    ReceivablesAccount [0..1] role unaccount
    Invoice [0..*] role unprocessedInvoices
end

association RecAcctToInvoiceProcc between
    ReceivablesAccount [0..1] role account
    Invoice [0..*] role processedInvoices
end

constraints
--receivablesAccount invariant
--an invoice cannot be both unprocessed and processed
context ReceivablesAccount inv notboth:
    self.unprocessedInvoices->intersection(self.processedInvoices)->isEmpty()

context ReceivablesAccount inv InvoiceNumCheck:
    self.number.size() = 6

--ARProcessor::ProcessInvoices pre-conditions
--There must be some unprocessedInvoices
context ARProcessor::ProcessInvoices (arAccounts: Set(ReceivablesAccount)) pre unprocessedInvoicesExist:
    arAccounts->forAll(arAccount | arAccount.unprocessedInvoices->notEmpty())

--ARProcessor::ProcessInvoices post-conditions
--unprocessed invoices become processedInvocies
context ARProcessor::ProcessInvoices(arAccounts: Set(ReceivablesAccount)) post unprocessedBecomeProcessed:
    arAccounts->forAll(arAccount | arAccount.unprocessedInvoices->isEmpty()) and
--processed invocies includes unprocessed invoices in pre-state
    arAccounts->forAll(arAccount | arAccount.processedInvoices->includesAll(arAccount.unprocessedInvoices@pre))

--ARProcessor::EndOfMonthUpdate pre conditions
--there are no unprocessed invoices
context ARProcessor::EndOfMonthUpdate(arAccounts:Set(ReceivablesAccount)) pre noUnprocessedInvoices:
    arAccounts->forAll(arAccount |arAccount.unprocessedInvoices->isEmpty())

--ARProcessor::EndOfMonthUpdate post conditions
context ARProcessor::EndOfMonthUpdate(arAccounts:Set(ReceivablesAccount)) post balancesUpdated:
    arAccounts->forAll(arAccount |
    arAccount.day120Balance = arAccount.day90Balance@pre and
    arAccount.day90Balance = arAccount.day60Balance@pre and
    arAccount.day60Balance = arAccount.day30Balance@pre and
    arAccount.day30Balance = arAccount.currentBalance@pre and
    arAccount.currentBalance = 0)

